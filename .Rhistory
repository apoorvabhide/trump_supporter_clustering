Balls = sum(IsBallFaced),
Wickets = sum(IsWicket),
Dots = sum(IsBatDotBall),
Boundaries = sum(BaRuns %in% c(4,6)),
BoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)]))
matchsum <- ipl_df %>%  filter(TeamA == team | TeamB==team) %>% group_by(MatchID) %>%
dplyr::summarise(MatchRuns = sum(BaRuns),
MatchBalls = sum(IsBallFaced),
MatchWickets = sum(IsWicket),
MatchDots = sum(IsBatDotBall),
MatchBoundaries = sum(BaRuns %in% c(4,6)),
MatchBoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)])) %>% mutate(MatchStrikeRate = Runs/Balls,
MatchOutRate = Wickets/Balls,
MatchAverage = Runs/Wickets)
batcompbyphase <- batcompbyphase %>% left_join(matchsum)
batcompbyphase <- ipl_df %>%  filter(BatTeam == team) %>% group_by(MatchID,InningsNo,Phase,WinFlag) %>%
dplyr::summarise(Runs = sum(BaRuns),
Balls = sum(IsBallFaced),
Wickets = sum(IsWicket),
Dots = sum(IsBatDotBall),
Boundaries = sum(BaRuns %in% c(4,6)),
BoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)]))
matchsum <- ipl_df %>%  filter(TeamA == team | TeamB==team) %>% group_by(MatchID) %>%
dplyr::summarise(MatchRuns = sum(BaRuns),
MatchBalls = sum(IsBallFaced),
MatchWickets = sum(IsWicket),
MatchDots = sum(IsBatDotBall),
MatchBoundaries = sum(BaRuns %in% c(4,6)),
MatchBoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)])) %>% mutate(MatchStrikeRate = Runs/Balls,
MatchOutRate = Wickets/Balls,
MatchAverage = Runs/Wickets)
matchsum <- ipl_df %>%  filter(TeamA == team | TeamB==team) %>% group_by(MatchID) %>%
dplyr::summarise(MatchRuns = sum(BaRuns),
MatchBalls = sum(IsBallFaced),
MatchWickets = sum(IsWicket),
MatchDots = sum(IsBatDotBall),
MatchBoundaries = sum(BaRuns %in% c(4,6)),
MatchBoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)])) %>% mutate(MatchStrikeRate = MatchRuns/MatchBalls,
MatchOutRate = MatchWickets/MatchBalls,
MatchAverage = MatchRuns/MatchWickets)
batcompbyphase <- batcompbyphase %>% left_join(matchsum)
View(batcompbyphase)
batcompbyphase <- batcompbyphase %>% mutate(PhaseRAA = (Runs - MatchStrikeRate*Balls) +
(MatchAverage*Balls*(MatchOutRate - Wickets/Balls)))
batcompbyphase <- batcompbyphase %>% mutate(PhaseRAA = (Runs - MatchStrikeRate*Balls) +
(MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseDotsPC = (Dots/Balls) - (MatchDots/MatchBalls),
PhaseBoundaryPC = (Boundaries/Balls) - (MatchBoundaries/MatchBalls))
batcompbyphase <- batcompbyphase %>% mutate(PhaseRAA = (Runs - MatchStrikeRate*Balls) +
(MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseDotsPC = (Dots/Balls) - (MatchDots/MatchBalls),
PhaseBoundaryPC = (Boundaries/Balls) - (MatchBoundaries/MatchBalls)) %>%
dplyr::select(MatchID,InningsNo,Phase,WinFlag,PhaseRAA,PhaseDotsPC,PhaseBoundaryPC)
batcompbyphase <- ipl_df %>%  filter(BatTeam == team) %>% group_by(MatchID,InningsNo,Phase,WinFlag) %>%
dplyr::summarise(Runs = sum(BaRuns),
Balls = sum(IsBallFaced),
Wickets = sum(IsWicket),
Dots = sum(IsBatDotBall),
Boundaries = sum(BaRuns %in% c(4,6)),
BoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)]))
matchsum <- ipl_df %>%  filter(TeamA == team | TeamB==team) %>% group_by(MatchID) %>%
dplyr::summarise(MatchRuns = sum(BaRuns),
MatchBalls = sum(IsBallFaced),
MatchWickets = sum(IsWicket),
MatchDots = sum(IsBatDotBall),
MatchBoundaries = sum(BaRuns %in% c(4,6)),
MatchBoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)])) %>% mutate(MatchStrikeRate = MatchRuns/MatchBalls,
MatchOutRate = MatchWickets/MatchBalls,
MatchAverage = MatchRuns/MatchWickets)
batcompbyphase <- batcompbyphase %>% left_join(matchsum)
batcompbyphase <- batcompbyphase %>% mutate(PhaseRAA = (Runs - MatchStrikeRate*Balls) +
(MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseSRAA = (Runs - MatchStrikeRate*Balls),
PhaseORAA = (MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseDotsPC = (Dots/Balls) - (MatchDots/MatchBalls),
PhaseBoundaryPC = (Boundaries/Balls) - (MatchBoundaries/MatchBalls)) %>%
dplyr::select(MatchID,InningsNo,Phase,WinFlag,PhaseRAA,PhaseSRAA,PhaseORAA,PhaseDotsPC,PhaseBoundaryPC)
View(batcompbyphase)
View(ipl_df)
ipl_df$Winner[ipl$MatchID == "2019-05-02-mumbai-indians-sunrisers-hyderabad"] <- "Mumbai Indians"
ipl_df$Winner[ipl_df$MatchID == "2019-05-02-mumbai-indians-sunrisers-hyderabad"] <- "Mumbai Indians"
ipl_df <- ipl_df %>% mutate(WinFlag = ifelse(Winner == team,"Won","Lost"))
batcompbypos <- ipl_df %>% filter(BatTeam == team) %>% group_by(position,InningsNo,WinFlag) %>%
dplyr::summarise(AvgRuns = sum(BaRuns)/length(unique(MatchID)),
AvgBF = sum(IsBallFaced)/length(unique(MatchID)),
SR = sum(BaRuns)*100/sum(IsBallFaced),
DotsPC = sum(IsBatDotBall)/sum(IsBallFaced))
batcompbypos <- melt(batcompbypos,id.vars = c("position","InningsNo","WinFlag"))
batcompbypos <- dcast(batcompbypos,position ~ WinFlag+InningsNo+variable)
ipl_df <- ipl_df %>% mutate(Phase = case_when(Over <= 3 ~ "1",
Over > 3 & Over <= 6 ~ "2",
Over > 6 & Over <= 10 ~ "3",
Over > 10 & Over <= 14 ~ "4",
Over > 14 & Over <= 17 ~ "5",
Over > 17 & Over <= 20 ~ "6"))
batcompbyphase <- ipl_df %>%  filter(BatTeam == team) %>% group_by(MatchID,InningsNo,Phase,WinFlag) %>%
dplyr::summarise(Runs = sum(BaRuns),
Balls = sum(IsBallFaced),
Wickets = sum(IsWicket),
Dots = sum(IsBatDotBall),
Boundaries = sum(BaRuns %in% c(4,6)),
BoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)]))
matchsum <- ipl_df %>%  filter(TeamA == team | TeamB==team) %>% group_by(MatchID) %>%
dplyr::summarise(MatchRuns = sum(BaRuns),
MatchBalls = sum(IsBallFaced),
MatchWickets = sum(IsWicket),
MatchDots = sum(IsBatDotBall),
MatchBoundaries = sum(BaRuns %in% c(4,6)),
MatchBoundaryRuns = sum(BaRuns[BaRuns %in% c(4,6)])) %>% mutate(MatchStrikeRate = MatchRuns/MatchBalls,
MatchOutRate = MatchWickets/MatchBalls,
MatchAverage = MatchRuns/MatchWickets)
batcompbyphase <- batcompbyphase %>% left_join(matchsum)
batcompbyphase <- batcompbyphase %>% mutate(PhaseRAA = (Runs - MatchStrikeRate*Balls) +
(MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseSRAA = (Runs - MatchStrikeRate*Balls),
PhaseORAA = (MatchAverage*Balls*(MatchOutRate - Wickets/Balls)),
PhaseDotsPC = (Dots/Balls) - (MatchDots/MatchBalls),
PhaseBoundaryPC = (Boundaries/Balls) - (MatchBoundaries/MatchBalls)) %>%
dplyr::select(MatchID,InningsNo,Phase,WinFlag,PhaseRAA,PhaseSRAA,PhaseORAA,PhaseDotsPC,PhaseBoundaryPC)
mean(batcompbyphase$PhaseSRAA[batcompbyphase$InningsNo=="1st innings" & batcompbyphase$Phase==6])
rm(list = ls())
setwd("~/Documents/Work/Messy Fractals/IPL 2020/Match Data/")
#########################################################################
#  Loading required packages                                            #
#########################################################################
library(dplyr)
library(xml2)
library(rvest)
library(jsonlite)
library(stringr)
source("Source/match_scrape_source.R")
#########################################################################
#  Setting API URL                                                      #
#########################################################################
base_url_1 <- "http://site.api.espn.com/apis/site/v2/sports/cricket/"
base_url_2 <- "/playbyplay?contentorigin=espn&event="
base_url_3 <- "&lang=en&page="
base_url_4 <- "&period="
base_url_5 <- "&region=gb&section=cricinfo"
# matchid <- 1192850
series_id <- 8048
MatchID <- 1216526
ipl <- read.csv("~/Documents/Work/Messy Fractals/Data/Ball-by-ball CSV/IPL Historical + Margin.csv",stringsAsFactors = F,nrows = 10)
shortname <- read.csv("Data/TeamShortNameMapping.csv",stringsAsFactors = F)
matchid <- MatchID
match <- data.frame()
colorder <- colnames(ipl)
r <- scrape_match_data_cricinfo(matchid = matchid,series_id = series_id,team_shortname_mapping = shortname,
column_order = colorder)
matchdata <- r$match_data
TeamsRecord <- r$Teams
numeric_cols <- c("TotalOvers","BaRuns","ExtraRuns","TRuns","ExtraLB","ExtraB","ExtraW","ExtraNB")
matchdata[numeric_cols] <- lapply(matchdata[numeric_cols], as.integer)
matchdata$DeliveryID <- as.numeric(matchdata$DeliveryID)
matchdata$PlayerOut[matchdata$Dismissal==""] <- NA
write.csv(matchdata,"Data/IPL2020Match32.csv",row.names = F)
matchdata1 <- read.csv("Cumulative Data/IPL2020Match31.csv",stringsAsFactors = F)
matchdata2 <- rbind(matchdata1,matchdata)
write.csv(matchdata2,"Cumulative Data/IPL2020Match32.csv",row.names = F)
library(dplyr)
library(ggplot2)
library(reshape2)
setwd("~/Documents/Work/Messy Fractals/IPL 2020/Match Data/")
source("../SeasonSource/season_source.R")
K <- 9
starting_elo <- read.csv("../Qualification Predictions/Output/StartingElo2020.csv",stringsAsFactors = F)
current_season_df <- read.csv("Cumulative Data/IPL2020Match32.csv",stringsAsFactors = F)
dls <- read.csv("~/Documents/Work/Messy Fractals/Data/DLS Resources.csv",stringsAsFactors = F)
current_season_df <- current_season_df %>% mutate(Season = as.integer(substr(MatchID,1,4)))
match1 <- create_match_df(ipl_df = current_season_df)
EloStart20 <- starting_elo %>% rename(PreRating=Rating)
update <- update_elo(starting_elo_df = EloStart20,match_df = match1)
CurrentEloD <- update$EndElo %>% dplyr::select(Team,PostRating) %>% rename(Rating=PostRating)
View(CurrentEloD)
match_result_prediction_elo <- function(CurrentEloDF,TeamA,TeamB)
{
teamarating <- CurrentEloDF$Rating[CurrentEloDF$Team == TeamA]
teambrating <- CurrentEloDF$Rating[CurrentEloDF$Team == TeamB]
Weteama <- 1/(10^(-(teamarating-teambrating)/400) + 1)
Weteamb <- 1/(10^(-(teambrating-teamarating)/400) + 1)
out <- list(TeamAWinPC = Weteama,TeamBWinPC=Weteamb)
return(out)
}
get_predictions_df <- function(current_season_df,starting_elo_df)
{
match1 <- create_match_df(ipl_df = current_season_df)
EloStart20 <- starting_elo %>% rename(PreRating=Rating)
# Loop over this to see performance over matches
matches <- current_season_df %>% distinct(MatchDate,TeamA,TeamB,MatchID) %>% mutate(MatchNo = 1)
matches$MatchNo <- cumsum(matches$MatchNo)
match1 <- match1 %>% left_join(matches)
predictions <- data.frame()
# Do this for match 1 manually
pred1 <- match_result_prediction_elo(CurrentEloDF = starting_elo,TeamA = "Mumbai Indians",TeamB="Chennai Super Kings")
pred1 <- round(pred1$TeamAWinPC,2)
p <- data.frame(MatchID = match1$MatchID[1],TeamA = match1$TeamA[1],TeamB = match1$TeamB[1],PredictedTeamAWinPC=pred1,
PredictedTeamBWinPC=1-pred1,Winner=match1$Winner[1])
predictions <- rbind(predictions,p)
for(i in 2:nrow(matches))
{
match2 <- match1 %>% filter(MatchNo < matches$MatchNo[i])
update <- update_elo(starting_elo_df = EloStart20,match_df = match2)
CurrentEloD <- update$EndElo %>% dplyr::select(Team,PostRating) %>% rename(Rating=PostRating)
# CurrentEloD %>% arrange(desc(Rating))
pred <- match_result_prediction_elo(CurrentEloDF = CurrentEloD,TeamA = matches$TeamA[i],TeamB=matches$TeamB[i])
pred <- round(pred$TeamAWinPC,4)
print(paste0(matches$TeamA[i]," vs ",matches$TeamB[i],": ",pred*100,"%"))
p <- data.frame(MatchID = match1$MatchID[i],TeamA = match1$TeamA[i],TeamB = match1$TeamB[i],PredictedTeamAWinPC=pred,
PredictedTeamBWinPC=1-pred,Winner=match1$Winner[i])
predictions <- rbind(predictions,p)
}
return(predictions)
}
pr <- get_predictions_df(current_season_df = current_season_df,starting_elo_df = starting_elo)
pr <- pr %>% mutate(TeamAWinFlag = ifelse(Winner == TeamA,1,0))
venuewin <- current_season_df %>% filter(InningsNo=="1st innings") %>% distinct(MatchID,Venue,BatTeam,Winner) %>%
rename(Bat1stTeam=BatTeam) %>% mutate(Bat1stWinFlag=ifelse(Bat1stTeam==Winner,1,0),
MatchNo=1) %>% mutate(MatchNo=ave(MatchNo,Venue,FUN=cumsum)) #%>%
# group_by(Venue,MatchNo) %>% dplyr::summarise(CumulativeWin = cummean(Bat1stWinFlag))
venuewin$Bat1stWinPC <- ave(venuewin$Bat1stWinFlag,venuewin$Venue,FUN = cummean)
venuewin <- venuewin %>% group_by(Venue) %>% mutate(Bat1stWinPC = lag(Bat1stWinPC)) %>% replace_na(list(Bat1stWinPC=0.5))
library(tidyr)
get_predictions_df <- function(current_season_df,starting_elo_df)
{
match1 <- create_match_df(ipl_df = current_season_df)
EloStart20 <- starting_elo %>% rename(PreRating=Rating)
# Loop over this to see performance over matches
matches <- current_season_df %>% distinct(MatchDate,TeamA,TeamB,MatchID) %>% mutate(MatchNo = 1)
matches$MatchNo <- cumsum(matches$MatchNo)
match1 <- match1 %>% left_join(matches)
predictions <- data.frame()
# Do this for match 1 manually
pred1 <- match_result_prediction_elo(CurrentEloDF = starting_elo,TeamA = "Mumbai Indians",TeamB="Chennai Super Kings")
pred1 <- round(pred1$TeamAWinPC,2)
p <- data.frame(MatchID = match1$MatchID[1],TeamA = match1$TeamA[1],TeamB = match1$TeamB[1],PredictedTeamAWinPC=pred1,
PredictedTeamBWinPC=1-pred1,Winner=match1$Winner[1])
predictions <- rbind(predictions,p)
for(i in 2:nrow(matches))
{
match2 <- match1 %>% filter(MatchNo < matches$MatchNo[i])
update <- update_elo(starting_elo_df = EloStart20,match_df = match2)
CurrentEloD <- update$EndElo %>% dplyr::select(Team,PostRating) %>% rename(Rating=PostRating)
# CurrentEloD %>% arrange(desc(Rating))
pred <- match_result_prediction_elo(CurrentEloDF = CurrentEloD,TeamA = matches$TeamA[i],TeamB=matches$TeamB[i])
pred <- round(pred$TeamAWinPC,4)
print(paste0(matches$TeamA[i]," vs ",matches$TeamB[i],": ",pred*100,"%"))
p <- data.frame(MatchID = match1$MatchID[i],TeamA = match1$TeamA[i],TeamB = match1$TeamB[i],PredictedTeamAWinPC=pred,
PredictedTeamBWinPC=1-pred,Winner=match1$Winner[i])
predictions <- rbind(predictions,p)
}
return(predictions)
}
pr <- get_predictions_df(current_season_df = current_season_df,starting_elo_df = starting_elo)
pr <- pr %>% mutate(TeamAWinFlag = ifelse(Winner == TeamA,1,0))
venuewin <- current_season_df %>% filter(InningsNo=="1st innings") %>% distinct(MatchID,Venue,BatTeam,Winner) %>%
rename(Bat1stTeam=BatTeam) %>% mutate(Bat1stWinFlag=ifelse(Bat1stTeam==Winner,1,0),
MatchNo=1) %>% mutate(MatchNo=ave(MatchNo,Venue,FUN=cumsum)) #%>%
# group_by(Venue,MatchNo) %>% dplyr::summarise(CumulativeWin = cummean(Bat1stWinFlag))
venuewin$Bat1stWinPC <- ave(venuewin$Bat1stWinFlag,venuewin$Venue,FUN = cummean)
venuewin <- venuewin %>% group_by(Venue) %>% mutate(Bat1stWinPC = lag(Bat1stWinPC)) %>% replace_na(list(Bat1stWinPC=0.5))
pr <- pr %>% left_join(venuewin) %>% replace_na(list(Bat1stWinPC=0.5))
Error1 <- data.frame(stringsAsFactors = F)
for(w1 in seq(0,1,0.01))
{
print(paste0("W1: ",w1))
w2 <- (1-w1)
pr <- pr %>% mutate(PredictedTeamAWinPCVenue = ifelse(TeamA == Bat1stTeam,
(PredictedTeamAWinPC*w1 + Bat1stWinPC*w2),
(PredictedTeamAWinPC*w1 + (1 - Bat1stWinPC)*w2)),
WinFlag=ifelse(TeamA==Winner,1,0))
brier <- mean((pr$PredictedTeamAWinPCVenue - pr$WinFlag)^2)
er <- data.frame(W1=w1,W2=w2,BrierScore=brier)
Error1 <- rbind(Error1,er)
}
MinError <- Error1 %>% arrange(BrierScore) %>% slice(1)
W1 <- MinError$W1[1]
W2 <- MinError$W2[1]
pr <- pr %>% mutate(PredictedTeamAWinPCVenue = ifelse(TeamA == Bat1stTeam,
(PredictedTeamAWinPC*W1+ Bat1stWinPC*W2),
(PredictedTeamAWinPC*W1 + (1 - Bat1stWinPC)*W2)))
predict_todays_game <- function(predictions_df,TeamA,TeamB,Venue,CurrentEloDF,W1)
{
VenueStadium <- case_when(Venue == "Abu Dhabi" ~ "Sheikh Zayed Stadium, Abu Dhabi",
Venue == "Dubai" ~ "Dubai International Cricket Stadium",
Venue == "Sharjah" ~ "Sharjah Cricket Stadium")
teama <- match_result_prediction_elo(CurrentEloDF = CurrentEloDF,TeamA = TeamA,TeamB=TeamB)
teama <- round(teama$TeamAWinPC,4)
print(paste0(TeamA,"'s Win % Predicted by Pure Elo: ",teama*100,"%"))
venuerec1 <- predictions_df %>% filter(Venue == VenueStadium) %>% group_by(Venue) %>%
dplyr::summarise(Bat1stWinPC=mean(Bat1stWinFlag),
.groups = "drop")
vbat1 <- venuerec1$Bat1stWinPC
print(paste0("Win% Batting first at ",Venue,": ",round(vbat1*100,2),"%"))
bat1pred <- teama*W1 + vbat1*(1-W1)
bat2pred <- teama*W1 + (1-vbat1)*(1-W1)
print(paste0("Adjusted Prediction if ",TeamA," bat first: ",round(bat1pred*100,2),"%"))
print(paste0("Adjusted Prediction if ",TeamA," bat second: ",round(bat2pred*100,2),"%"))
}
predict_todays_game(predictions_df = pr,TeamA = "Rajasthan Royals",TeamB = "Mumbai Indians",
Venue = "Dubai",CurrentEloDF = CurrentEloD,W1 = W1)
pred <- pr %>% mutate(PredictedTeamBWinPCVenue = 1-PredictedTeamAWinPCVenue) %>%
dplyr::select(MatchID,TeamA,TeamB,PredictedTeamAWinPCVenue,PredictedTeamBWinPCVenue,Winner)
pred1 <- pred %>% dplyr::select(MatchID,TeamA,TeamB) %>% melt(id.vars="MatchID") %>% rename(Team=variable,
TeamName=value)
pred2 <- pred %>% dplyr::select(MatchID,PredictedTeamAWinPCVenue,PredictedTeamBWinPCVenue) %>%
rename(TeamA=PredictedTeamAWinPCVenue,
TeamB=PredictedTeamBWinPCVenue) %>%
melt(id.vars="MatchID") %>% rename(Team=variable,PredictedWinPC=value)
pred3 <- pred %>% dplyr::select(MatchID,TeamA,TeamB,Winner) %>% mutate(TeamAWinFlag=ifelse(TeamA==Winner,1,0),
TeamBWinFlag=ifelse(TeamB==Winner,1,0)) %>%
dplyr::select(-TeamA,-TeamB,-Winner) %>% rename(TeamA=TeamAWinFlag,
TeamB=TeamBWinFlag) %>%
melt(id.vars="MatchID") %>% rename(Team=variable,WinFlag=value)
pred <- pred1 %>% full_join(pred2) %>% full_join(pred3)
acc <- pred %>% group_by(Predicted=plyr::round_any(PredictedWinPC,0.1)) %>% summarise(Actual=mean(WinFlag),
Matches=length(unique(MatchID)))
ggplot(acc,aes(x=Predicted,y=Actual)) + geom_point() + xlim(0,1) + ylim(0,1) + geom_abline(slope = 1,intercept = 0)
View(acc)
acc <- pred %>% group_by(Predicted=plyr::round_any(PredictedWinPC,0.1)) %>% summarise(Actual=mean(WinFlag),
MatchesWon=sum(WinFlag),
Matches=length(unique(MatchID)))
ggplot(acc,aes(x=Predicted,y=Actual)) + geom_point() + xlim(0,1) + ylim(0,1) + geom_abline(slope = 1,intercept = 0)
View(acc)
View(pred)
acc <- pred %>% group_by(Predicted=plyr::round_any(PredictedWinPC,0.1)) %>% summarise(Actual=mean(WinFlag),
MatchesWon=sum(WinFlag),
Cases=length(unique(paste0(MatchID,TeamName))))
View(acc)
ggplot(acc,aes(x=Predicted,y=Actual)) + geom_point() + xlim(0,1) + ylim(0,1) + geom_abline(slope = 1,intercept = 0)
predict_todays_game(predictions_df = pr,TeamA = "Rajasthan Royals",TeamB = "Royal Challengers Bangalore",
Venue = "Dubai",CurrentEloDF = CurrentEloD,W1 = W1)
View(pr)
tied_games <- c("2020-09-28-royal-challengers-bangalore-mumbai-indians","2020-09-20-delhi-capitals-kings-xi-punjab")
pr <- pr %>% left_join(venuewin) %>% replace_na(list(Bat1stWinPC=0.5)) %>% filter(!MatchID %in% tied_games)
Error1 <- data.frame(stringsAsFactors = F)
for(w1 in seq(0,1,0.01))
{
print(paste0("W1: ",w1))
w2 <- (1-w1)
pr <- pr %>% mutate(PredictedTeamAWinPCVenue = ifelse(TeamA == Bat1stTeam,
(PredictedTeamAWinPC*w1 + Bat1stWinPC*w2),
(PredictedTeamAWinPC*w1 + (1 - Bat1stWinPC)*w2)),
WinFlag=ifelse(TeamA==Winner,1,0))
brier <- mean((pr$PredictedTeamAWinPCVenue - pr$WinFlag)^2)
er <- data.frame(W1=w1,W2=w2,BrierScore=brier)
Error1 <- rbind(Error1,er)
}
MinError <- Error1 %>% arrange(BrierScore) %>% slice(1)
W1 <- MinError$W1[1]
W2 <- MinError$W2[1]
pr <- pr %>% mutate(PredictedTeamAWinPCVenue = ifelse(TeamA == Bat1stTeam,
(PredictedTeamAWinPC*W1+ Bat1stWinPC*W2),
(PredictedTeamAWinPC*W1 + (1 - Bat1stWinPC)*W2)))
predict_todays_game <- function(predictions_df,TeamA,TeamB,Venue,CurrentEloDF,W1)
{
VenueStadium <- case_when(Venue == "Abu Dhabi" ~ "Sheikh Zayed Stadium, Abu Dhabi",
Venue == "Dubai" ~ "Dubai International Cricket Stadium",
Venue == "Sharjah" ~ "Sharjah Cricket Stadium")
teama <- match_result_prediction_elo(CurrentEloDF = CurrentEloDF,TeamA = TeamA,TeamB=TeamB)
teama <- round(teama$TeamAWinPC,4)
print(paste0(TeamA,"'s Win % Predicted by Pure Elo: ",teama*100,"%"))
venuerec1 <- predictions_df %>% filter(Venue == VenueStadium) %>% group_by(Venue) %>%
dplyr::summarise(Bat1stWinPC=mean(Bat1stWinFlag),
.groups = "drop")
vbat1 <- venuerec1$Bat1stWinPC
print(paste0("Win% Batting first at ",Venue,": ",round(vbat1*100,2),"%"))
bat1pred <- teama*W1 + vbat1*(1-W1)
bat2pred <- teama*W1 + (1-vbat1)*(1-W1)
print(paste0("Adjusted Prediction if ",TeamA," bat first: ",round(bat1pred*100,2),"%"))
print(paste0("Adjusted Prediction if ",TeamA," bat second: ",round(bat2pred*100,2),"%"))
}
predict_todays_game(predictions_df = pr,TeamA = "Rajasthan Royals",TeamB = "Royal Challengers Bangalore",
Venue = "Dubai",CurrentEloDF = CurrentEloD,W1 = W1)
predict_todays_game(predictions_df = pr,TeamA = "Chennai Super Kings",TeamB = "Delhi Capitals",
Venue = "Sharjah",CurrentEloDF = CurrentEloD,W1 = W1)
rm(list=ls())
# Load required libraries
library(haven)
library(dplyr)
library(ggplot2)
library(cluster)
library(reshape2)
setwd("~/Documents/Writing/Trump Supporter/")
# Load the data and choose required columns
cces_ts <- readRDS("Data/cces_2018_data.RDS")
# cces_ts <- read_dta(file = "./cces18_common_vv.dta")
# saveRDS(cces_ts,"./cces_2018_data.RDS")
cces <- cces_ts %>% select(caseid=caseid,
trumpapprove=CC18_308a,
policespending=CC18_426_4,
alwaysallowabortion=CC18_321a,
exceptionabortion=CC18_321b,
allowemployersdenyabortion=CC18_321d,
allabortionsillegal=CC18_321f,
borderspendingpluswall=CC18_322a,
daca=CC18_322b,
reducelegalimmigration=CC18_322c_new,
dacawallandreducelegal=CC18_322d_new,
reentryprison=CC18_322f,
cutcorporatetax=CC18_325a,
cuttaxeslt500k=CC18_325e_new,
cuttaxesgt500k=CC18_325f_new,
medicareforall=CC18_327a,
repealobamacare=CC18_327c,
partialrepeallargeempl=CC18_327d,
chinatariff=CC18_331a,
allowkeystone=CC18_332b,
withdrawparis=CC18_332c,
withdrawtpp = CC18_332e,
selfideology=CC18_334A,
russiacollusion=CC18_335,
epaco2=CC18_415a,
environprot = CC18_415d,
finchoiceact = CC18_416,
repealcleanpower=CC18_417_a,
withdrawirandeal=CC18_417_b,
contactpublicoff = CC18_417a_5,
muslimban=CC18_417_c,
blackswithoutfavours=CC18_422e,
blacksgottenlessthandeserve=CC18_422g,
blackstryharder=CC18_422h,
whiteprivilege=CC18_422a,
racismrare = CC18_422b,
feministreasonable=CC18_422d,
welfarespend=CC18_426_1,
healthcarespend=CC18_426_2,
educationspend = CC18_426_3,
banassault=CC18_320c,
backgroundchecks=CC18_320a,
easierconcealed=CC18_320d,
transban=CC18_417_d,
trumpapprovepost=CC18_app_dtrmp_post,
womenunreasonablesexism=CC18_422c) %>% filter(!is.na(trumpapprove),!is.na(trumpapprovepost))
cces <- cces %>% filter(trumpapprove == 2)
colSums(is.na(cces))
cces <- cces %>% na.exclude()
# ggplot(cces,aes(x=trumpideology - repideology))+ geom_histogram(aes(y=..density..))
# Create a df for clustering, selecting only a few columns
cces_cluster <- cces %>% dplyr::select(-trumpapprove) %>%  #dplyr::select(caseid,selfideology,borderspendingpluswall,cutcorporatetax) %>%
mutate_all(as.character())
caseids <- cces$caseid
cces_cluster$caseid <- NULL
for(i in 1:ncol(cces_cluster))
{
cces_cluster[,i] <- as_factor(cces_cluster[,i])
}
cces_cluster1 <- cces_cluster
# creating distance matrix
# set.seed(72)
distmatrix <- daisy(x = cces_cluster1,metric = "gower")
plot(hclust(distmatrix,method = "complete"))
set.seed(13)
hc <- hclust(distmatrix,method="complete")
cces_cluster1$caseid <- caseids
cces_cluster1$ClusterAssigned <- cutree(hc,k=3)
cces_cluster1 %>% group_by(ClusterAssigned) %>% dplyr::summarise(Responses = length(unique(caseid))) %>%
mutate(ResponsesPC=Responses/sum(Responses))
# CCES Profile variables
cces_profile <- cces_ts %>% select(caseid=caseid,
birthyr,
gender,
sexuality,
region,
edloan,
employ,
educ,
race,
ideo5,
numchildren,
pew_churatd,
pew_bornagain,
pew_prayer,
internethome,
internetwork,
pid7,
urbancity,
nationaleconomy=CC18_301,
faminc_new,
newsint,
postedabtpolitics = CC18_300d_1,
householdincomelastyear=CC18_302,
union,
demideology=CC18_334D,
investor,
tvuse=CC18_300_2 ,
newspaper=CC18_300_3,
radiouse=CC18_300_4,
voted2018midterm=CC18_401)
for(i in 1:ncol(cces_profile))
{
cces_profile[,i] <- as_factor(cces_profile[,i])
}
cces_cluster2 <- cces_cluster1 %>% mutate(caseid=as.numeric(caseid)) %>% left_join(cces_profile)
cols <- colnames(cces_cluster2)
cols <- cols[!cols %in% c("caseid","ClusterAssigned")]
cluster_summary <- function(df,clusterNo)
{
clust <- df %>% filter(ClusterAssigned == clusterNo)
responses <- data.frame(stringsAsFactors = F)
for(col in cols)
{
t <- data.frame(table(clust[col]),stringsAsFactors = F) %>% mutate(FreqPC = Freq/sum(Freq),
Question = col)
responses <- rbind(responses,t)
}
return(responses)
}
clust1 <- cluster_summary(cces_cluster2,clusterNo = 1) %>% rename(C1Freq=Freq,C1FreqPC=FreqPC)
clust2 <- cluster_summary(cces_cluster2,clusterNo = 2) %>% rename(C2Freq=Freq,C2FreqPC=FreqPC)
clust3 <- cluster_summary(cces_cluster2,clusterNo = 3) %>% rename(C3Freq=Freq,C3FreqPC=FreqPC)
clusters <- clust1 %>% full_join(clust2) %>% full_join(clust3)# %>% full_join(clust4)
View(clusters)
